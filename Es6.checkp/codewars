//solution 
function isSolved(board) {
  var board = board.reduce(function (a, b) { return a.concat(b); });
  var winningPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];

  var won = winningPatterns.filter(function (pattern) {
      return (board[pattern[0]] !== 0) && ((board[pattern[0]] === board[pattern[1]]) && (board[pattern[1]] === board[pattern[2]]));
  });

  if (won.length) {
      return board[won[0][0]];
  }

  if (board.some(function (pos) { return pos === 0; })) { return -1; }
  return 0;
}

isSolved([[1, 1, 1], [1, 1, 2], [2, 1, 1]]);

//solution 
function calculate(num1,num2){
  return toBase10(num1) + toBase10(num2)
}

function toBase10(s){
  return s.split('')
          .reverse()
          .map((e,i)=>e=='1'? Math.pow(2,i) : 0)
          .reduce((x,y)=>x+y)
}

//solution 
function changer(str) {
  return str.replace(/[a-z]/gi, function (char) { 
      char = String.fromCharCode(char.toLowerCase().charCodeAt(0) + 1);
      if (char == '{' || char == '[') char = 'a'; 
      if (/[aeiuo]/.test(char)) char = char.toUpperCase();
      return char;
  })
};

changer('Catz30')


//Imporved Solution

function changer(str) { 
return str.toLowerCase()          
          .replace(/[a-z]/g, s => s === 'z' ? 'a' : String.fromCharCode(s.charCodeAt(0)+1))
          .replace(/[auioe]/g, s => s.toUpperCase());          
}

changer('Catz30')
function groupByCommas(n) {
  return n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

//solution
function isPrime(number) {
  var start = 2;
  while (start <= Math.sqrt(number)) {
      if (number % start++ < 1) return false;
  }
  return number > 1;
}

function solve(a, b) {
  var count = 0;
  for (a; a < b; a++) {
      var sq = (a * a).toString();
      var str = a.toString();
      if (str.slice(-2) == sq.slice(-2) && isPrime(sq.slice(0, 2)) && isPrime(str.slice(0, 2))) {
          console.log(str + " - " + sq + " - " + isPrime(sq.slice(0, 2)));
          count++;
      }
  }
  return count;
}

solve(2, 100000);

//solution
likes [] // must be "no one likes this"
likes ["Peter"] // must be "Peter likes this"
likes ["Jacob", "Alex"] // must be "Jacob and Alex like this"
likes ["Max", "John", "Mark"] // must be "Max, John and Mark like this"
likes ["Alex", "Jacob", "Mark", "Max"] // must be "Alex, Jacob and 2 others like this"


function likes (names) {
  var templates = [
    'no one likes this',
    '{name} likes this',
    '{name} and {name} like this',
    '{name}, {name} and {name} like this',
    '{name}, {name} and {n} others like this'
  ];
  var idx = Math.min(names.length, 4);
  
  return templates[idx].replace(/{name}|{n}/g, function (val) {
    return val === '{name}' ? names.shift() : names.length;
  });
}

//solution
function dontGiveMeFive(start, end) {
  var arr = [];

  for (var i = start; i < end; i++) {
      arr.push(i);
  }

  arr = arr.map(function (val) {
      return "" + val
  });

  arr = arr.filter(function (val) {
      for (var i = start; i < end; i++) {
          if(!val.includes('5')) {
              return val
          }
      }
  });
  return arr.length;
}

dontGiveMeFive(1, 9);

//solution
function isIsogram(str) {
  str = str.toLowerCase();
  str = str.split("");
  str = str.sort();
  for (var i = 0; i < str.length; i++) {
    if (str[i] === str[i + 1]) {
      return false;
    }
  } return true;
};


//Testing
isIsogram( "Dermatoglyphics" ) == true
isIsogram( "aba" ) == false
isIsogram( "moOse" ) == false // -- ignore letter case

//solution
//              1
//           3     5
//        7     9    11
//    13    15    17    19
// 21    23    25    27    29


function rowSumOddNumbers(n) {
  return Math.pow(n, 3);
}

//Other Solution
const rowSumOddNumbers = n => Math.pow(n, 3);

//solution
function getMiddle(s)
{
  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1); 
}

//solution
function accum(s) {
	var res = '';
	for (var i = 0; i < s.length; i++) {
    	for (var j = 0; j <= i; j++)
	    	j === 0 ? res += s[i].toUpperCase() : res += s[i].toLowerCase();
  		if (i !== s.length - 1) res += '-';
	  }
	return res;
}

//Best Solution 

function accum(s) {
  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');
}

//solution

function accum(s) {
	var res = '';
	for (var i = 0; i < s.length; i++) {
    	for (var j = 0; j <= i; j++)
	    	j === 0 ? res += s[i].toUpperCase() : res += s[i].toLowerCase();
  		if (i !== s.length - 1) res += '-';
	  }
	return res;
}

//Best Solution 

function accum(s) {
  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');
}

//solution 
// Time to test your basic knowledge in functions! Return the odds from a list:

//First Solution
function odds(values){
  return values.filter(function(num){ if( num % 2 ) return num;});
}

//Best Solution 
var odds = vv => vv.filter(v => v % 2);

//solution 
// Time to test your basic knowledge in functions! Return the odds from a list:

//First Solution
function odds(values){
  return values.filter(function(num){ if( num % 2 ) return num;});
}

//Best Solution 
var odds = vv => vv.filter(v => v % 2);

//solution
function well(array) {
	let count = 0;
	for (let i = 0; i < array.length; i++) {
		if (array[i] === 'good') {
			count++;
		}
	}
	return count > 2 ? 'I smell a series!' : count >= 1 ? 'Publish!' : 'Fail!';
}

//solution
//First Solution 

function removeChar(str){
  //You got this!
   var str = str.split('');
   var first = str.pop();
   var last = str.shift();
   return str.join('');
 };
 
 removeChar('abcgd');
 
 //Best Solution 
 
 const removeChar = str => str.slice(1,-1);

 //solution 
 //First Solution

function repeatStr(n, s) {
  var nStr = '';
  for (var i = 0; i < n; i++) {
      nStr = nStr + s;
  };
  return news;
}


//Best Solution 

repeatStr = (n, s) => s.repeat(n)

//solution
  
function hoopCount (n) {
  if (n >= 10) { return "Great, now move on to tricks"; }
  else { return "Keep at it until you get it"; }
}

//soltion
function hoopCount (n) {
  if (n >= 10) { return "Great, now move on to tricks"; }
  else { return "Keep at it until you get it"; }
}
//solution 
function isSolved(board) {
    var board = board.reduce(function (a, b) { return a.concat(b); });
    var winningPatterns = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
  
    var won = winningPatterns.filter(function (pattern) {
        return (board[pattern[0]] !== 0) && ((board[pattern[0]] === board[pattern[1]]) && (board[pattern[1]] === board[pattern[2]]));
    });
  
    if (won.length) {
        return board[won[0][0]];
    }
  
    if (board.some(function (pos) { return pos === 0; })) { return -1; }
    return 0;
  }
  
  isSolved([[1, 1, 1], [1, 1, 2], [2, 1, 1]]);
  
  //solution 
  function calculate(num1,num2){
    return toBase10(num1) + toBase10(num2)
  }
  
  function toBase10(s){
    return s.split('')
            .reverse()
            .map((e,i)=>e=='1'? Math.pow(2,i) : 0)
            .reduce((x,y)=>x+y)
  }
  
  //solution 
  function changer(str) {
    return str.replace(/[a-z]/gi, function (char) { 
        char = String.fromCharCode(char.toLowerCase().charCodeAt(0) + 1);
        if (char == '{' || char == '[') char = 'a'; 
        if (/[aeiuo]/.test(char)) char = char.toUpperCase();
        return char;
    })
  };
  
  changer('Catz30')
  
  
  //Imporved Solution
  
  function changer(str) { 
  return str.toLowerCase()          
            .replace(/[a-z]/g, s => s === 'z' ? 'a' : String.fromCharCode(s.charCodeAt(0)+1))
            .replace(/[auioe]/g, s => s.toUpperCase());          
  }
  
  changer('Catz30')
  function groupByCommas(n) {
    return n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  
  //solution
  function isPrime(number) {
    var start = 2;
    while (start <= Math.sqrt(number)) {
        if (number % start++ < 1) return false;
    }
    return number > 1;
  }
  
  function solve(a, b) {
    var count = 0;
    for (a; a < b; a++) {
        var sq = (a * a).toString();
        var str = a.toString();
        if (str.slice(-2) == sq.slice(-2) && isPrime(sq.slice(0, 2)) && isPrime(str.slice(0, 2))) {
            console.log(str + " - " + sq + " - " + isPrime(sq.slice(0, 2)));
            count++;
        }
    }
    return count;
  }
  
  solve(2, 100000);
  
  //solution
  likes [] // must be "no one likes this"
  likes ["Peter"] // must be "Peter likes this"
  likes ["Jacob", "Alex"] // must be "Jacob and Alex like this"
  likes ["Max", "John", "Mark"] // must be "Max, John and Mark like this"
  likes ["Alex", "Jacob", "Mark", "Max"] // must be "Alex, Jacob and 2 others like this"
  
  
  function likes (names) {
    var templates = [
      'no one likes this',
      '{name} likes this',
      '{name} and {name} like this',
      '{name}, {name} and {name} like this',
      '{name}, {name} and {n} others like this'
    ];
    var idx = Math.min(names.length, 4);
    
    return templates[idx].replace(/{name}|{n}/g, function (val) {
      return val === '{name}' ? names.shift() : names.length;
    });
  }
  
  //solution
  function dontGiveMeFive(start, end) {
    var arr = [];
  
    for (var i = start; i < end; i++) {
        arr.push(i);
    }
  
    arr = arr.map(function (val) {
        return "" + val
    });
  
    arr = arr.filter(function (val) {
        for (var i = start; i < end; i++) {
            if(!val.includes('5')) {
                return val
            }
        }
    });
    return arr.length;
  }
  
  dontGiveMeFive(1, 9);
  
  //solution
  function isIsogram(str) {
    str = str.toLowerCase();
    str = str.split("");
    str = str.sort();
    for (var i = 0; i < str.length; i++) {
      if (str[i] === str[i + 1]) {
        return false;
      }
    } return true;
  };
  
  
  //Testing
  isIsogram( "Dermatoglyphics" ) == true
  isIsogram( "aba" ) == false
  isIsogram( "moOse" ) == false // -- ignore letter case
  
  //solution
  //              1
  //           3     5
  //        7     9    11
  //    13    15    17    19
  // 21    23    25    27    29
  
  
  function rowSumOddNumbers(n) {
    return Math.pow(n, 3);
  }
  
  //Other Solution
  const rowSumOddNumbers = n => Math.pow(n, 3);
  
  //solution
  function getMiddle(s)
  {
    return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1); 
  }
  
  //solution
  function accum(s) {
      var res = '';
      for (var i = 0; i < s.length; i++) {
          for (var j = 0; j <= i; j++)
              j === 0 ? res += s[i].toUpperCase() : res += s[i].toLowerCase();
            if (i !== s.length - 1) res += '-';
        }
      return res;
  }
  
  //Best Solution 
  
  function accum(s) {
    return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');
  }
  
  //solution
  
  function accum(s) {
      var res = '';
      for (var i = 0; i < s.length; i++) {
          for (var j = 0; j <= i; j++)
              j === 0 ? res += s[i].toUpperCase() : res += s[i].toLowerCase();
            if (i !== s.length - 1) res += '-';
        }
      return res;
  }
  
  //Best Solution 
  
  function accum(s) {
    return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');
  }
  
  //solution 
  // Time to test your basic knowledge in functions! Return the odds from a list:
  
  //First Solution
  function odds(values){
    return values.filter(function(num){ if( num % 2 ) return num;});
  }
  
  //Best Solution 
  var odds = vv => vv.filter(v => v % 2);
  
  //solution 
  // Time to test your basic knowledge in functions! Return the odds from a list:
  
  //First Solution
  function odds(values){
    return values.filter(function(num){ if( num % 2 ) return num;});
  }
  
  //Best Solution 
  var odds = vv => vv.filter(v => v % 2);
  
  //solution
  function well(array) {
      let count = 0;
      for (let i = 0; i < array.length; i++) {
          if (array[i] === 'good') {
              count++;
          }
      }
      return count > 2 ? 'I smell a series!' : count >= 1 ? 'Publish!' : 'Fail!';
  }
  
  //solution
  //First Solution 
  
  function removeChar(str){
    //You got this!
     var str = str.split('');
     var first = str.pop();
     var last = str.shift();
     return str.join('');
   };
   
   removeChar('abcgd');
   
   //Best Solution 
   
   const removeChar = str => str.slice(1,-1);
  
   //solution 
   //First Solution
  
  function repeatStr(n, s) {
    var nStr = '';
    for (var i = 0; i < n; i++) {
        nStr = nStr + s;
    };
    return news;
  }
  
  
  //Best Solution 
  
  repeatStr = (n, s) => s.repeat(n)
  
  //solution
    
  function hoopCount (n) {
    if (n >= 10) { return "Great, now move on to tricks"; }
    else { return "Keep at it until you get it"; }
  }
  
  //soltion
  function hoopCount (n) {
    if (n >= 10) { return "Great, now move on to tricks"; }
    else { return "Keep at it until you get it"; }
  }